import numpy as np
import pandas as pd
import tensorflow as tf

data = pd.read_csv('Churn_Modelling.csv')

x=data.iloc[:,3:-1].values
y=data.iloc[:,-1].values

print("x : ",x)
print("y : ",y)


#Encoding the categorical data
# Using Label Encoder for 'Gender' column

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

x[:,2] = le.fit_transform(x[:,2])


print("Label Encoded x : ",x)

# Using OneHotEncoder for "Geography"

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

ct=ColumnTransformer(transformers=[('encoder',OneHotEncoder(),[1])],remainder='passthrough')

x=np.array(ct.fit_transform(x))

print("One Hot Encoded x : ",x)

# Splitting the dataset into training and testing set

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler

sc=StandardScaler()

x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

# Building the ANN Model

ann = tf.keras.models.Sequential()

#Adding the input and first hidden layer

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))

#Adding the input and second hidden layer

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))

# Adding the output 

ann.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))

# Compiling the model

ann.compile(optimizer='adam',loss='Binary_lossentrophy',metrics=['accuracy'])

ann.fit(x_train,y_train,batch_size=32,epochs=100)

y_predict = ann.predict(x_test)
y_predict = y_predict > 0.5

print("y_predict : ",y_predict)

from sklearn.metrics import confusion_matrix
from sklearn import metrics

cm=confusion_matrix(y_test,y_predict)
print("Confusion Matrix : ",cm)

print("The Accuracy of the model : ",metrics.accuracy_score(y_test,y_predict))
